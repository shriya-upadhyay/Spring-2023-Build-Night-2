/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface CrowdFundInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "campaigns"
      | "cancel"
      | "claim"
      | "count"
      | "getCampaign"
      | "launch"
      | "pledge"
      | "pledgedAmount"
      | "refund"
      | "unpledge"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Cancel"
      | "Claim"
      | "Launch"
      | "Pledge"
      | "Refund"
      | "Unpledge"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "campaigns",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "count", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCampaign",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "launch",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pledge",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pledgedAmount",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unpledge",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "campaigns", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "count", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "launch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pledge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pledgedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpledge", data: BytesLike): Result;
}

export namespace CancelEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LaunchEvent {
  export type InputTuple = [
    id: BigNumberish,
    creator: AddressLike,
    goal: BigNumberish,
    startAt: BigNumberish,
    endAt: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    creator: string,
    goal: bigint,
    startAt: bigint,
    endAt: bigint
  ];
  export interface OutputObject {
    id: bigint;
    creator: string;
    goal: bigint;
    startAt: bigint;
    endAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PledgeEvent {
  export type InputTuple = [
    id: BigNumberish,
    caller: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [id: bigint, caller: string, amount: bigint];
  export interface OutputObject {
    id: bigint;
    caller: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundEvent {
  export type InputTuple = [
    id: BigNumberish,
    caller: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [id: bigint, caller: string, amount: bigint];
  export interface OutputObject {
    id: bigint;
    caller: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpledgeEvent {
  export type InputTuple = [
    id: BigNumberish,
    caller: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [id: bigint, caller: string, amount: bigint];
  export interface OutputObject {
    id: bigint;
    caller: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CrowdFund extends BaseContract {
  connect(runner?: ContractRunner | null): CrowdFund;
  waitForDeployment(): Promise<this>;

  interface: CrowdFundInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  campaigns: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, boolean] & {
        creator: string;
        goal: bigint;
        pledged: bigint;
        startAt: bigint;
        endAt: bigint;
        claimed: boolean;
      }
    ],
    "view"
  >;

  cancel: TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;

  claim: TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;

  count: TypedContractMethod<[], [bigint], "view">;

  getCampaign: TypedContractMethod<
    [_id: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, boolean] & {
        creator: string;
        goal: bigint;
        pledged: bigint;
        startAt: bigint;
        endAt: bigint;
        claimed: boolean;
      }
    ],
    "view"
  >;

  launch: TypedContractMethod<
    [_goal: BigNumberish, _startAt: BigNumberish, _endAt: BigNumberish],
    [void],
    "nonpayable"
  >;

  pledge: TypedContractMethod<[_id: BigNumberish], [void], "payable">;

  pledgedAmount: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  refund: TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;

  unpledge: TypedContractMethod<
    [_id: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "campaigns"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, boolean] & {
        creator: string;
        goal: bigint;
        pledged: bigint;
        startAt: bigint;
        endAt: bigint;
        claimed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "cancel"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "count"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCampaign"
  ): TypedContractMethod<
    [_id: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, boolean] & {
        creator: string;
        goal: bigint;
        pledged: bigint;
        startAt: bigint;
        endAt: bigint;
        claimed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "launch"
  ): TypedContractMethod<
    [_goal: BigNumberish, _startAt: BigNumberish, _endAt: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pledge"
  ): TypedContractMethod<[_id: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "pledgedAmount"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "refund"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpledge"
  ): TypedContractMethod<
    [_id: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Cancel"
  ): TypedContractEvent<
    CancelEvent.InputTuple,
    CancelEvent.OutputTuple,
    CancelEvent.OutputObject
  >;
  getEvent(
    key: "Claim"
  ): TypedContractEvent<
    ClaimEvent.InputTuple,
    ClaimEvent.OutputTuple,
    ClaimEvent.OutputObject
  >;
  getEvent(
    key: "Launch"
  ): TypedContractEvent<
    LaunchEvent.InputTuple,
    LaunchEvent.OutputTuple,
    LaunchEvent.OutputObject
  >;
  getEvent(
    key: "Pledge"
  ): TypedContractEvent<
    PledgeEvent.InputTuple,
    PledgeEvent.OutputTuple,
    PledgeEvent.OutputObject
  >;
  getEvent(
    key: "Refund"
  ): TypedContractEvent<
    RefundEvent.InputTuple,
    RefundEvent.OutputTuple,
    RefundEvent.OutputObject
  >;
  getEvent(
    key: "Unpledge"
  ): TypedContractEvent<
    UnpledgeEvent.InputTuple,
    UnpledgeEvent.OutputTuple,
    UnpledgeEvent.OutputObject
  >;

  filters: {
    "Cancel(uint256)": TypedContractEvent<
      CancelEvent.InputTuple,
      CancelEvent.OutputTuple,
      CancelEvent.OutputObject
    >;
    Cancel: TypedContractEvent<
      CancelEvent.InputTuple,
      CancelEvent.OutputTuple,
      CancelEvent.OutputObject
    >;

    "Claim(uint256)": TypedContractEvent<
      ClaimEvent.InputTuple,
      ClaimEvent.OutputTuple,
      ClaimEvent.OutputObject
    >;
    Claim: TypedContractEvent<
      ClaimEvent.InputTuple,
      ClaimEvent.OutputTuple,
      ClaimEvent.OutputObject
    >;

    "Launch(uint256,address,uint256,uint32,uint32)": TypedContractEvent<
      LaunchEvent.InputTuple,
      LaunchEvent.OutputTuple,
      LaunchEvent.OutputObject
    >;
    Launch: TypedContractEvent<
      LaunchEvent.InputTuple,
      LaunchEvent.OutputTuple,
      LaunchEvent.OutputObject
    >;

    "Pledge(uint256,address,uint256)": TypedContractEvent<
      PledgeEvent.InputTuple,
      PledgeEvent.OutputTuple,
      PledgeEvent.OutputObject
    >;
    Pledge: TypedContractEvent<
      PledgeEvent.InputTuple,
      PledgeEvent.OutputTuple,
      PledgeEvent.OutputObject
    >;

    "Refund(uint256,address,uint256)": TypedContractEvent<
      RefundEvent.InputTuple,
      RefundEvent.OutputTuple,
      RefundEvent.OutputObject
    >;
    Refund: TypedContractEvent<
      RefundEvent.InputTuple,
      RefundEvent.OutputTuple,
      RefundEvent.OutputObject
    >;

    "Unpledge(uint256,address,uint256)": TypedContractEvent<
      UnpledgeEvent.InputTuple,
      UnpledgeEvent.OutputTuple,
      UnpledgeEvent.OutputObject
    >;
    Unpledge: TypedContractEvent<
      UnpledgeEvent.InputTuple,
      UnpledgeEvent.OutputTuple,
      UnpledgeEvent.OutputObject
    >;
  };
}
